@page "/contact"
@using Texnomic.Blazor.hCaptcha
@using Texnomic.Blazor.hCaptcha.Enums
@using NzCovidPassTelegramBot.Data.Email
@using NzCovidPassTelegramBot.Services

<PageTitle>Contact - Vaxxy</PageTitle>

<h1>Contact</h1>

<p>To get in touch, drop me a message with the contact form below.</p>

<div style="max-width:500px">
    <EditForm Model="@ContactFormModel" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <CustomValidation @ref="CustomValidation" />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label" for="from">
                From
            </label>
            <InputText class="form-control" id="from" @bind-Value="@ContactFormModel.From" />
        </div>
        <div class="mb-3">
            <label class="form-label" for="requestType">
                Subject
            </label>
            <InputSelect class="form-select" id="requestType" @bind-Value="@ContactFormModel.Subject">
                @foreach (var value in Enum.GetValues(typeof(ContactRequestType)))
                {
                    <option value="@value">@Helpers.InsertSpaceBetweenCaps(value.ToString() ?? "")</option>
                }
            </InputSelect>
            </div>
        <div class="mb-3">
            <label class="form-label" for="message">
                Message
            </label>
            <InputTextArea class="form-control" id="message" @bind-Value="@ContactFormModel.Message" />
        </div>

        <div class="mb-3">
            <label class="form-label">
                Captcha
            </label>
            <HCaptcha Callback="hCaptchaCallback" Theme="Theme.Light"></HCaptcha>
        </div>

        <button class="btn btn-primary" type="submit" disabled="@MessageSending">Send</button>
    </EditForm>
</div>

<div class="mt-3">
    <ConditonalGroup When="@MessageSent">
        <p>Message has been sent!</p>
    </ConditonalGroup>
    <ConditonalGroup When="@MessageFailed">
        <p class="text-danger">Sending has failed, please try again.</p>
</ConditonalGroup>
</div>

<Signature />

@code {
    [Inject]
    IEmailService? EmailService { get; set; }
    CustomValidation? CustomValidation { get; set; }

    bool MessageSent { get; set; }
    bool MessageSending { get; set; }
    bool MessageFailed { get; set; }

    string Captcha { get; set; } = "";
    const int _captchaLength = 5;

    ContactForm ContactFormModel { get; set; } = new ContactForm();

    bool IsCaptchaValid { get; set; }

    void hCaptchaCallback(bool Result) => IsCaptchaValid = Result;

    void RegenerateCaptcha()
    {
        
    }

    bool CustomValidator()
    {
        CustomValidation?.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        if (!IsCaptchaValid)
        {
            errors.Add("Captcha",
                new() { "Captcha is not valid, please retry" });
        }

        if (errors.Any())
        {
            CustomValidation?.DisplayErrors(errors);
            return false;
        }

        return true;
    }

    void ClearForm()
    {
        ContactFormModel = new ContactForm();
    }

    async void HandleValidSubmit()
    {
        MessageFailed = false;
        MessageSent = false;

        await InvokeAsync(StateHasChanged);

        if (CustomValidator())
        {
            MessageSending = true;
            await InvokeAsync(StateHasChanged);

            if (await EmailService!.SendContactFormEmail(ContactFormModel))
            {
                MessageSent = true;
                ClearForm();
            }
            else
            {
                MessageFailed = true;
            }
            MessageSending = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    void HandleInvalidSubmit()
    {
        MessageFailed = false;
        MessageSent = false;
        CustomValidator();
    }

    protected override Task OnInitializedAsync()
    {
        RegenerateCaptcha();

        return base.OnInitializedAsync();
    }
}
